
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"I am a Computer-Scientist who graduated from a Ms in Research in Informatics focused on Computer Graphics and Virtual Reality (UPC) while researching and implementing geometry processing solutions for HP’s high-resolution 3D printers.\nIn 2022, I got selected and participated in Vulcanus in Japan, where I got to live and research in the land of the rising sun, working in Robotics for Mujin Inc.\nMy areas of interest cover mainly anything related to graphics, though I have mostly worked on geometry processing and animation/simulation. Also, C++ is my language of choice.\nGet my resumé .\n","date":1657126800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1657126800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a Computer-Scientist who graduated from a Ms in Research in Informatics focused on Computer Graphics and Virtual Reality (UPC) while researching and implementing geometry processing solutions for HP’s high-resolution 3D printers.","tags":null,"title":"Pol Martín Garcia","type":"authors"},{"authors":null,"categories":null,"content":"Summary Master’s thesis on developing a real-time interactive simulator of deformable objects, using state-of-the-art techniques used by Pixar and Disney.\nThe thesis introduces the topic of simulation of volumetric models from the basics, which can be found in TBP.\nSimulator implemented following Kim and Eberle’s course Dynamic Deformables, and implementing Smith et al. Stable Neo-Hookean energy (among others).\nHighly optimized implementation using Eigen.\nResults The simulation allows user interaction with specific groups of vertices.\nYour browser does not support the video tag.\rCollision detection and interaction with colliders are also incorporated into the simulator.\nYour browser does not support the video tag.\r","date":1656288000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656288000,"objectID":"08260bcd599b9f0c6c732676fb0f3ac9","permalink":"https://SirKoto.github.io/project/tissuefem/","publishdate":"2022-06-27T00:00:00Z","relpermalink":"/project/tissuefem/","section":"project","summary":"Real-time interactive simulator of tetrahedral models using the Finite Elements Method.","tags":["OpenGL","Interactive"],"title":"Fast 3D Deformations using FEM (Master's thesis)","type":"project"},{"authors":null,"categories":null,"content":"Summary Bachelor’s thesis on simulating arbitrary deformable materials, following the Material Point Method, in its Moving Least Squares version (Yuanming et al.).\nWrote an introductory document to MPM, from the point of view of an Informatic Engineer student. The publication can be found here.\nA versatile implementation was also developed, with its CPU and GPU versions, able to create arbitrary scenes with custom parameters.\nAwards Decorated with the best informatics engineering bachelor final thesis of the promotion 2019-2020 of the Faculty of Informatics of Barcelona. By FIB-Alumni. Granted with the best bachelor final thesis in Spain related to Computer Graphics of the promotions 2019-2021. By the Spanish congress of Computer Graphics. Results Some GIFs of the obtained results can be seen here:\nA comparison of different stiffness materials, with some hardening: Preserve all deformation as elastic: Huge plastic deformations allow to simulate fluids: Many more GIFs can be found in this Google Drive Folder\nIf you want to see more results, you can watch the following video. Be sure to increase the quality to HD.\n","date":1600041600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600041600,"objectID":"0d3e94721a89a79404dcf92dbc718f58","permalink":"https://SirKoto.github.io/project/mpm-simulator/","publishdate":"2020-09-14T00:00:00Z","relpermalink":"/project/mpm-simulator/","section":"project","summary":"GPU and CPU implementation of the Material Point Method.","tags":["OpenGL","Simulation","Interactive","Animation"],"title":"MPM Simulator (Bachelor's thesis)","type":"project"},{"authors":null,"categories":null,"content":"Summary Interactive particle and mass-springs simulator, entirely implemented on the GPU in compute shaders, using Verlet’s numerical method.\nCollisions with spheres and triangle meshes are also resolved in the GPU.\nThis includes 3 different scenes, showing particle interaction, spring systems, and cloth by using springs.\nThe springs and cloth can be rendered using tessellation and B-Splines, which subdivides the primitives so the object looks smooth.\nThe following video shows a chain of springs rendered with and without tessellation.\nYour browser does not support the video tag.\rBy using OpenGL 4.2’s Atomic Counter, this program can simulate scenes with a dynamic number of particles, specified at runtime.\nScenes Particles\nDynamic creation and destruction of particles. Showing configurable bounciness and friction against external bodies. Your browser does not support the video tag.\rSprings Mass-Spring system. Chains of springs that can be initialized to look like hair. Rendering following the Kajiya-Kay model.\nFor the simulation, there are 3 compute passes: Clear spring forces. Compute forces per spring. Each particle retrieves the forces of its connected springs, computes collisions, and advects itself. Your browser does not support the video tag.\rCloth By connecting the particles with a grid of springs, we can compute cloth-like behavior.\nIt supports a simple 4-connectivity particle-spring system. And also Provot’s spring model, which can simulate stretch, shear, and bending. Your browser does not support the video tag.\r","date":1635724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635724800,"objectID":"074bdb42bbd94061f05c37a325eaec1f","permalink":"https://SirKoto.github.io/project/springsimulator/","publishdate":"2021-11-01T00:00:00Z","relpermalink":"/project/springsimulator/","section":"project","summary":"GPU simulator of mass-spring systems with collisions. Hair and cloth rendering.","tags":["OpenGL","Interactive","Animation"],"title":"GPU Mass-Spring Simulator","type":"project"},{"authors":null,"categories":null,"content":"Summary Multilevel clustering of vertices of a triangle mesh using Spectral partitioning.\nThe first step is to apply vertex clustering using an octree, followed by spectral partitioning with the Fiedler Vector, until a certain depth is reached.\nVertex ClusteringVertex + Spectral Clustering\rThe Fiedler Vector expresses the algebraic connectivity of a graph. A partition of the vertices is given by the sign of the components of the Fiedler Vector. Given the Laplacian matrix $\\mathcal{L}$ of a mesh, the Fiedler vector is the eigenvector with the second-smallest eigenvalue.\nThe multilevel implementation is required because computing the Fiedler Vector of huge matrices is prohibitive, and vertex clustering is a good and fast approach to reduce the complexity.\nOne must note that vertex clustering may produce disconnect clusters, which spectral clustering does not like as input. A Union-Find algorithm has been implemented to separate the connected clusters and classify them separately.\nThe program also supports computing an optimized cache-oblivious mesh layout, following Yoon et al.1, which optimizes each of the clusters’ vertices and sorts the faces of the mesh. It is important to note that it has $O(n!)$ complexity, where $n$ is the size of the clusters.\nThe implementation is written in C++, using Eigen and Spectra for the sparse support and computation of eigenvectors.\nYoon, S. E., Lindstrom, P., Pascucci, V., \u0026amp; Manocha, D. (2005). Cache-oblivious mesh layouts. In ACM SIGGRAPH 2005 Papers (pp. 886-893). ↩︎\n","date":1641945600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641945600,"objectID":"279d2815aeaec8272d01beae03038a43","permalink":"https://SirKoto.github.io/project/spectral-cluster/","publishdate":"2022-01-12T00:00:00Z","relpermalink":"/project/spectral-cluster/","section":"project","summary":"Triangle mesh spectral clustering and cache-oblivious mesh layout optimization","tags":["Geometry processing","Vertex clustering"],"title":"Spectral Clustering","type":"project"},{"authors":null,"categories":null,"content":"Summary Program, implemented in C++, which generates a scene with a set of Armadillos (346k triangles, 173k vertices per model) on a grid. Then the camera follows a route that tries to emulate many different camera angles.\nThis is used to benchmark the framerate obtained with the following algorithms:\nUnoptimized implementation View-frustum culling GPU Occlusion queries culling CHC++: Frustum culling+occlusion queries (O. Mattausch \u0026amp; J. Bittner \u0026amp; M. Wimme). Results The following chart shows the resulting frame rates of running the same scene with the different algorithms (Lower is better). It’s easy to see that the Occlusion Queries and CHC++ algorithms are superior to simple frustum culling. Nevertheless, it is important to note that the occlusion queries implementation uses the information of the previous frame, thus it can cause some poping.\nOn the other hand, CHC++ works with current frame visibility, not causing visible artifacts, but because of its internal data structures sometimes brusque camera movements may cause noticeable frame-rate drops.\nMore information… For more information about the actual implementation and results see the Visibility_Report.pdf file.\nDeveloped for the Fast Realistic Rendering course of the Master in Innovation and Research in Informatics, at the Barcelona School of Informatics.\n","date":1630627200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1630627200,"objectID":"abef5180be0b0566e5da6b2fb4b691c3","permalink":"https://SirKoto.github.io/project/visibility-comparison/","publishdate":"2021-09-03T00:00:00Z","relpermalink":"/project/visibility-comparison/","section":"project","summary":"Scalable implementation of multiple visibility culling algorithms for benchmarking.","tags":["OpenGL"],"title":"GPU Visibility algorithms comparison","type":"project"},{"authors":null,"categories":null,"content":"Summary Simple Game Engine using Vulkan 1.2, implementing common Game Engine features and capabilities.\nThe software also implements a custom job system using system fibers, following Naughty Dog’s talk on GDC2015 “Parallelizing the Naughty Dog Engine Using Fibers”.\nThis Engine implements common characteristics as interactable GameObject oriented scenes, scene/project serialization, model instancing, and multi-threaded command buffer recording.\nSome algorithms for geometry processing and time-critical rendering have also been implemented, such as:\nVertex-Clustering mesh simplification. Fast simplification using octrees, and configurable with normal clustering and different error metrics. Automatic LOD meshes creation, which also computes multiple LODs at the same time for a performant implementation. Critical-Rendering automatic LOD selection to achieve stable fps. The objective frame delta time is configurable. Cell-to-Cell visibility. The Engine includes an editor to generate cells and walls; it generates a data structure that allows to precompute the visibility of the scene objects and cull non-visible objects at run-time. This uses a conservative supercover Bresenham approach. ","date":1619395200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619395200,"objectID":"eaba13c46e87e5b38a5746fd849626c8","permalink":"https://SirKoto.github.io/project/g-renderer/","publishdate":"2021-04-26T00:00:00Z","relpermalink":"/project/g-renderer/","section":"project","summary":"Game Engine using Vulkan, and fiber-based job system. Serialization, Mesh  simplification, cell-to-cell visibillity...","tags":["Vulkan","Interactive"],"title":"Vulkan Game Engine","type":"project"},{"authors":null,"categories":null,"content":"Summary Following the guidelines of Lindenmayer’s “The Algorithmic Beauty of Plants”, this project implements an L-system parser to create different patterns found in nature.\nIn particular, this project implemented with C++ and OpenGL, implements the following features:\nGraphical modeling using L-systems Custom constants 3D rotations Stochastic rules Interactive rendering Results Some of the examples provided with the program are these:\n","date":1624147200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624147200,"objectID":"19e479d8a7bcfe43cf496d1d9efa104f","permalink":"https://SirKoto.github.io/project/l-systems/","publishdate":"2021-06-20T00:00:00Z","relpermalink":"/project/l-systems/","section":"project","summary":"Parser, procedural generator and viewer of stochastic 3D plant-like geometry.","tags":["Interactive","OpenGL","Formal Grammar"],"title":"L-Systems","type":"project"},{"authors":["Pol Martín Garcia","Toni Susín"],"categories":null,"content":"","date":1657126800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1657126800,"objectID":"2a1649935ef2d77f78f4f5ff9bb5a649","permalink":"https://SirKoto.github.io/talk/interactive-fem-cpu-deformable-simulation-what-you-should-and-shouldnt-use-with-eigen/","publishdate":"2022-07-06T17:00:00Z","relpermalink":"/talk/interactive-fem-cpu-deformable-simulation-what-you-should-and-shouldnt-use-with-eigen/","section":"event","summary":"Presentation of poster. Containing several optimizations to apply to any Eigen's code for fast simulation.","tags":["Poster","Eigen","Fast FEM"],"title":"Interactive FEM CPU deformable simulation: What you should (and shouldn’t) use with Eigen","type":"event"},{"authors":["Pol Martín Garcia","Toni Susin Sanchez"],"categories":null,"content":" ","date":1632328200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632328200,"objectID":"c7f56dc66fe6b5564b4c706de725b6a8","permalink":"https://SirKoto.github.io/talk/mpm-simulation-from-the-point-of-view-of-a-student-short-paper/","publishdate":"2021-09-22T16:30:00Z","relpermalink":"/talk/mpm-simulation-from-the-point-of-view-of-a-student-short-paper/","section":"event","summary":"Presentation of winning bachelor thesis. Complexity evaluation and description of the thesis.","tags":[],"title":"MPM Simulation from the point of view of a Student - Short Paper","type":"event"},{"authors":["Alvar Vinacua Pla","Antonio Chica Calaf","Alex Carruesco Llorens","Jordi Gonzalez Rogel","Oriol Giralt Garcia","Sergio Gonzalez Martín","Pol Martín Garcia","Konstantinos Kazatzis","Joan Hugo Ballesteros Brandao"],"categories":null,"content":"","date":1611187200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1611187200,"objectID":"135be15bff5c885c85f0d6328fbc0f29","permalink":"https://SirKoto.github.io/publication/beamlattices/","publishdate":"2021-01-21T00:00:00Z","relpermalink":"/publication/beamlattices/","section":"publication","summary":"In an example a method includes receiving, at processing circuitry, beam lattice data modelling at least part of a three-dimensional object to be generated using additive manufacturing as a beam lattice. A volumetric data model may be determined from the beam lattice data. Determining the volumetric data model may comprise dividing a volume containing the beam lattice data into sub-volumes and categorising the sub- volumes into (I) interior sub-volumes, which are wholly within a beam of the beam lattice; (ii) exterior sub-volumes which are wholly outside the beams of the beam lattice; and (ii) boundary sub-volumes which partially coincide with a beam of the beam lattice. The method may further comprise subdividing boundary sub-volumes and categorising the subdivided sub-volumes until a threshold volume size of boundary sub-volume is reached.\n\n\n","tags":["Additive Manufacturing","Detection Method"],"title":"Beam lattice data in additive manufacturing - WO2021011049A1","type":"publication"},{"authors":["Alvar Vinacua Pla","Antonio Chica Calaf","Alex Carruesco Llorens","Oriol Giralt Garcia","Victor Diego Gutierrez","Sergio Gonzalez Martín","Pol Martín Garcia","Konstantinos Kazatzis","Joan Hugo Ballesteros Brandao"],"categories":null,"content":"","date":1611187200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1611187200,"objectID":"a2e28d9f7ae448c90d35f942225ff535","permalink":"https://SirKoto.github.io/publication/sfd/","publishdate":"2021-01-21T00:00:00Z","relpermalink":"/publication/sfd/","section":"publication","summary":"An example method, performed by processing circuitry, includes receiving an object model describing a geometry of a three-dimensional object to be generated by additive manufacturing. A geometrical transformation to be applied to the object model is determined. A first object portion comprising a surface feature of less than a threshold size and a second object portion free of such a surface feature is identified and a transformed model describing a volume containing a modified version of the object as a plurality of contiguous, non-overlapping sub-volumes is determined. Each sub-volume may be categorised as being interior to the object model, exterior to the object model, or a as a boundary sub-volume which spans an object boundary. The modified version of the object is determined by applying the geometrical transformation in the second object portion and not applying the geometrical transformation in the first object portion.\n\n\n","tags":["Additive Manufacturing","Detection Method"],"title":"Object model transformations - WO2021011077A1","type":"publication"},{"authors":["Pol Martín Garcia","吳恩達"],"categories":["Demo","教程"],"content":"import libr print(\u0026#39;hello\u0026#39;) Overview The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more Get Started 👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem Hugo Academic CLI: Automatically import publications from BibTeX Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files. Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://SirKoto.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":null,"categories":null,"content":"Summary GPU implementation to compute word similarities using the word embedding model of GloVe, which contains $2.2\\cdot10^6$ words.\nGiven a word, the program computes the cosine distance between all other words in the database, where the cosine distance is defined as follows:\n$$ cosDist(\\vec A, \\vec B) = \\frac{\\vec A \\cdot \\vec B}{|\\vec A||\\vec B|}$$\nBecause we are using angles to compute the similarities, we can also compute pairs of words with similar relationships. An example is if we search for king - queen we get (among others) men - women.\nAs the program will compute this distance between all other words, a GPU sorting and filtering algorithm have been implemented. It can retrieve the N words with the highest similarity.\nResults The final implementation, making use of warp synchronization and minimizing memory usage in the sorting, can compute the all similarities in under 10ms.\n","date":1592697600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592697600,"objectID":"15733f5bb6582e3f3735c7d125c403fe","permalink":"https://SirKoto.github.io/project/semantic-distances/","publishdate":"2020-06-21T00:00:00Z","relpermalink":"/project/semantic-distances/","section":"project","summary":"GPU distance computation and search using cosine similarities between words encoded in a vector space.","tags":["CUDA","C++"],"title":"Semantic distances between GloVe's word embedings","type":"project"},{"authors":["Pol Martín Garcia","Toni Susín Sánchez"],"categories":null,"content":"","date":1579737600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579737600,"objectID":"a850853103c302a95d8296f0b164fe2b","permalink":"https://SirKoto.github.io/publication/mpm-thesis/","publishdate":"2020-01-23T00:00:00Z","relpermalink":"/publication/mpm-thesis/","section":"publication","summary":"One of the most important branches of computer animation is the physic simulation of the behaviour of objects in a scene. In this field, you usually seek to obtain results that visually behave like real objects, and so it is essential to use the mathematical models that define their behaviour.\n\nIn particular, deformable objects are hard and challenging to simulate, since their behaviour is defined by continuum mechanics. In this category we can find fluids, elastic and plastic materials.\n\nThe fact that the validation in many cases is visual, allows simplifying such mathematical models to gain calculation speed or to decrease the complexity of what would be an engineering simulation.\n\nIn this end-of-degree project we delve into *MPM* (Material Point Method), which is a hybrid method based on particles and meshes, adaptable and efficient enough to perform a wide spectrum of simulations with multiple materials. With this method, we can incorporate the different types of interactions (elastic, plastic and tear) that simulated objects can experience.\n\nBecause this is such a complex topic, even more for the computer science student who has no prior experience in the field, this project aims to be a good introduction to the material simulation field from the point of view of a computer scientist, without assuming previous knowledge of continuum mechanics, numerical methods and simulation techniques, either based on finite element methods (*FEM*) or on the *MPM* itself.\n\n\n","tags":["Simulation"],"title":"Material Point Method (MPM) application to object deformation - Bachelor Thesis","type":"publication"},{"authors":null,"categories":null,"content":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you’ll find some examples of the types of technical content that can be rendered with Wowchemy.\nExamples Code Wowchemy supports a Markdown extension for highlighting code syntax. You can customize the styles under the syntax_highlighter option in your config/_default/params.yaml file.\n```python\rimport pandas as pd\rdata = pd.read_csv(\u0026#34;data.csv\u0026#34;)\rdata.head()\r```\rrenders as\nimport pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() Mindmaps Wowchemy supports a Markdown extension for mindmaps.\nSimply insert a Markdown markmap code block and optionally set the height of the mindmap as shown in the example below.\nA simple mindmap defined as a Markdown list:\n```markmap {height=\u0026#34;200px\u0026#34;}\r- Hugo Modules\r- wowchemy\r- wowchemy-plugins-netlify\r- wowchemy-plugins-netlify-cms\r- wowchemy-plugins-reveal\r```\rrenders as\n- Hugo Modules\r- wowchemy\r- wowchemy-plugins-netlify\r- wowchemy-plugins-netlify-cms\r- wowchemy-plugins-reveal A more advanced mindmap with formatting, code blocks, and math:\n```markmap\r- Mindmaps\r- Links\r- [Wowchemy Docs](https://wowchemy.com/docs/)\r- [Discord Community](https://discord.gg/z8wNYzb)\r- [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes)\r- Features\r- Markdown formatting\r- **inline** ~~text~~ *styles*\r- multiline\rtext\r- `inline code`\r-\r```js\rconsole.log(\u0026#39;hello\u0026#39;);\rconsole.log(\u0026#39;code block\u0026#39;);\r```\r- Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$\r```\rrenders as\n- Mindmaps\r- Links\r- [Wowchemy Docs](https://wowchemy.com/docs/)\r- [Discord Community](https://discord.gg/z8wNYzb)\r- [GitHub](https://github.com/wowchemy/wowchemy-hugo-themes)\r- Features\r- Markdown formatting\r- **inline** ~~text~~ *styles*\r- multiline\rtext\r- `inline code`\r-\r```js\rconsole.log(\u0026#39;hello\u0026#39;);\rconsole.log(\u0026#39;code block\u0026#39;);\r```\r- Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ Charts Wowchemy supports the popular Plotly format for interactive charts.\nSave your Plotly JSON in your page folder, for example line-chart.json, and then add the {{\u0026lt; chart data=\u0026#34;line-chart\u0026#34; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\nYou might also find the Plotly JSON Editor useful.\nMath Wowchemy supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.yaml file.\nTo render inline or block math, wrap your LaTeX math with {{\u0026lt; math \u0026gt;}}$...${{\u0026lt; /math \u0026gt;}} or {{\u0026lt; math \u0026gt;}}$$...$${{\u0026lt; /math \u0026gt;}}, respectively. (We wrap the LaTeX math in the Wowchemy math shortcode to prevent Hugo rendering our math as Markdown. The math shortcode is new in v5.5-dev.)\nExample math block:\n{{\u0026lt; math \u0026gt;}} $$ \\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2} $$ {{\u0026lt; /math \u0026gt;}} renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$\rExample inline math {{\u0026lt; math \u0026gt;}}$\\nabla F(\\mathbf{x}_{n})${{\u0026lt; /math \u0026gt;}} renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the math linebreak (\\\\):\n{{\u0026lt; math \u0026gt;}} $$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$ {{\u0026lt; /math \u0026gt;}} renders as\n$$\rf(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\\r1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}\r$$\rDiagrams Wowchemy supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid\rgraph TD\rA[Hard] --\u0026gt;|Text| B(Round)\rB --\u0026gt; C{Decision}\rC --\u0026gt;|One| D[Result 1]\rC --\u0026gt;|Two| E[Result 2]\r```\rrenders as\ngraph TD\rA[Hard] --\u0026gt;|Text| B(Round)\rB --\u0026gt; C{Decision}\rC --\u0026gt;|One| D[Result 1]\rC --\u0026gt;|Two| E[Result 2] An example sequence diagram:\n```mermaid\rsequenceDiagram\rAlice-\u0026gt;\u0026gt;John: Hello John, how are you?\rloop Healthcheck\rJohn-\u0026gt;\u0026gt;John: Fight against hypochondria\rend\rNote right of John: Rational thoughts!\rJohn--\u0026gt;\u0026gt;Alice: Great!\rJohn-\u0026gt;\u0026gt;Bob: How about you?\rBob--\u0026gt;\u0026gt;John: Jolly good!\r```\rrenders as\nsequenceDiagram\rAlice-\u0026gt;\u0026gt;John: Hello John, how are you?\rloop Healthcheck\rJohn-\u0026gt;\u0026gt;John: Fight against hypochondria\rend\rNote right of John: Rational thoughts!\rJohn--\u0026gt;\u0026gt;Alice: Great!\rJohn-\u0026gt;\u0026gt;Bob: How about you?\rBob--\u0026gt;\u0026gt;John: Jolly good! An example Gantt diagram:\n```mermaid\rgantt\rsection Section\rCompleted :done, des1, 2014-01-06,2014-01-08\rActive :active, des2, 2014-01-07, 3d\rParallel 1 : des3, after des1, 1d\rParallel 2 : des4, after des1, 1d\rParallel 3 : des5, after des3, 1d\rParallel 4 : des6, after des4, 1d\r```\rrenders …","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://SirKoto.github.io/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Wowchemy is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Markdown","type":"post"},{"authors":["Pol Martín Garcia"],"categories":[],"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic!\rInstall Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post\u0026#39;s title date: 2019-09-01 # Put any other Academic metadata here... --- Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post’s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=. Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://SirKoto.github.io/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://SirKoto.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"}]