<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vulkan | Pol&#39;s portfolio</title>
    <link>https://SirKoto.github.io/tag/vulkan/</link>
      <atom:link href="https://SirKoto.github.io/tag/vulkan/index.xml" rel="self" type="application/rss+xml" />
    <description>Vulkan</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2022 Pol Martín</copyright><lastBuildDate>Mon, 26 Apr 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://SirKoto.github.io/media/icon_hu36b41f71f33cc8e1aec8948b0e13c529_2050_512x512_fill_lanczos_center_3.png</url>
      <title>Vulkan</title>
      <link>https://SirKoto.github.io/tag/vulkan/</link>
    </image>
    
    <item>
      <title>Vulkan Game Engine</title>
      <link>https://SirKoto.github.io/project/g-renderer/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://SirKoto.github.io/project/g-renderer/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Simple Game Engine using Vulkan 1.2, implementing common Game Engine features and capabilities.&lt;/p&gt;
&lt;p&gt;The software also implements a custom job system using system fibers, following Naughty Dog&amp;rsquo;s talk on GDC2015 &amp;ldquo;&lt;a href=&#34;https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Parallelizing the Naughty Dog Engine Using Fibers&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This Engine implements common characteristics as interactable GameObject oriented scenes, scene/project serialization, model instancing, and multi-threaded command buffer recording.&lt;/p&gt;
&lt;p&gt;Some algorithms for geometry processing and time-critical rendering have also been implemented, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vertex-Clustering mesh simplification. Fast simplification using octrees, and configurable with normal clustering and different error metrics.&lt;/li&gt;
&lt;li&gt;Automatic LOD meshes creation, which also computes multiple LODs at the same time for a performant implementation.&lt;/li&gt;
&lt;li&gt;Critical-Rendering automatic LOD selection to achieve stable fps. The objective frame delta time is configurable.&lt;/li&gt;
&lt;li&gt;Cell-to-Cell visibility. The Engine includes an editor to generate cells and walls; it generates a data structure that allows to precompute the visibility of the scene objects and cull non-visible objects at run-time. This uses a conservative supercover Bresenham approach.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
