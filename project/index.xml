<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | Pol&#39;s porfolio</title>
    <link>https://SirKoto.github.io/project/</link>
      <atom:link href="https://SirKoto.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2022 Pol Martín</copyright><lastBuildDate>Wed, 12 Jan 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://SirKoto.github.io/media/icon_hu36b41f71f33cc8e1aec8948b0e13c529_2050_512x512_fill_lanczos_center_3.png</url>
      <title>Projects</title>
      <link>https://SirKoto.github.io/project/</link>
    </image>
    
    <item>
      <title>MPM Simulator (Bachelor thesis)</title>
      <link>https://SirKoto.github.io/project/mpm-simulator/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://SirKoto.github.io/project/mpm-simulator/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Bachelor thesis on simulating arbitrary deformable materials, following the Material Point Method, in its Moving Least Squares version (&lt;a href=&#34;https://github.com/yuanming-hu/taichi_mpm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yuanming et al.&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Wrote an introductory document to MPM, from the point of view of an Informatic Engineer student. The publication can be found &lt;a href=&#34;https://SirKoto.github.io/publication/mpm-thesis/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A versatile implementation was also developed, with its CPU and GPU versions, able to create arbitrary scenes with custom parameters.&lt;/p&gt;
&lt;h2 id=&#34;awards&#34;&gt;Awards&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Decorated with the best informatics engineering bachelor final thesis of the promotion 2019-2020 of the Faculty of Informatics of Barcelona. By &lt;a href=&#34;https://www.fibalumni.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FIB-Alumni&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Granted with the best bachelor final thesis in Spain related to Computer Graphics of the promotions 2019-2021. By the &lt;a href=&#34;https://www.virvig.eu/ceig2021/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spanish congress of Computer Graphics&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;Some GIFs of the obtained results can be seen here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A comparison of different stiffness materials, with some hardening:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://github.com/SirKoto/MPMSimulator/blob/master/images/cmp4.gif?raw=true&#34; alt=&#34;Falldown GIF&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preserve all deformation as elastic:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://github.com/SirKoto/MPMSimulator/blob/master/images/superDeffCor.gif?raw=true&#34; alt=&#34;Great Deformation Gif&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Huge plastic deformations allow to simulate fluids:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://github.com/SirKoto/MPMSimulator/blob/master/images/snow2.gif?raw=true&#34; alt=&#34;Snow Gif&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many more GIFs can be found in this &lt;a href=&#34;https://drive.google.com/drive/folders/1t-WDatiCCti9cPGHokXEi5BOoFrqEd-R?usp=sharing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Drive Folder&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to see more results, you can watch the following video. Be sure to increase the quality to HD.&lt;/p&gt;
&lt;iframe src=&#34;https://drive.google.com/file/d/1k0eGkb2ltT_0sRpTId-lWCAh5Sybbbti/preview&#34; width=&#34;640&#34; height=&#34;480&#34; allow=&#34;autoplay&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    
    <item>
      <title>GPU Mass-Spring Simulator</title>
      <link>https://SirKoto.github.io/project/springsimulator/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://SirKoto.github.io/project/springsimulator/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Interactive particle and mass-springs simulator, entirely implemented on the GPU in compute shaders, using Verlet&amp;rsquo;s numerical method.&lt;/p&gt;
&lt;p&gt;Collisions with spheres and triangle meshes are also resolved in the GPU.&lt;/p&gt;
&lt;p&gt;This includes 3 different scenes, showing particle interaction, spring systems, and cloth by using springs.&lt;/p&gt;
&lt;p&gt;The springs and cloth can be rendered using tessellation  and &lt;em&gt;B-Splines&lt;/em&gt;, which subdivides the primitives so the object looks smooth.&lt;/p&gt;
&lt;p&gt;The following video shows a chain of springs rendered with and without tessellation.&lt;/p&gt;
&lt;video autoplay muted loop&gt;
  &lt;source src=&#34;https://SirKoto.github.io/projects_images/mass_spring/tess.mp4&#34; type=&#34;video/mp4&#34;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;By using &lt;strong&gt;OpenGL 4.2&lt;/strong&gt;&amp;rsquo;s Atomic Counter, this program can simulate scenes with a dynamic number of particles, specified at runtime.&lt;/p&gt;
&lt;h2 id=&#34;scenes&#34;&gt;Scenes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Particles&lt;/strong&gt;&lt;br&gt;
Dynamic creation and destruction of particles. Showing configurable bounciness and friction against external bodies.&lt;/li&gt;
&lt;/ul&gt;
&lt;video autoplay muted loop&gt;
  &lt;source src=&#34;https://SirKoto.github.io/projects_images/mass_spring/particles.mp4&#34; type=&#34;video/mp4&#34;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Springs&lt;/strong&gt;&lt;br&gt;
Mass-Spring system. Chains of springs that can be initialized to look like hair. Rendering following the Kajiya-Kay model.&lt;br&gt;
For the simulation, there are 3 compute passes:
&lt;ul&gt;
&lt;li&gt;Clear spring forces.&lt;/li&gt;
&lt;li&gt;Compute forces per spring.&lt;/li&gt;
&lt;li&gt;Each particle retrieves the forces of its connected springs, computes collisions, and advects itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;video autoplay muted loop&gt;
  &lt;source src=&#34;https://SirKoto.github.io/projects_images/mass_spring/hair.mp4&#34; type=&#34;video/mp4&#34;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cloth&lt;/strong&gt;&lt;br&gt;
By connecting the particles with a grid of springs, we can compute cloth-like behavior.&lt;br&gt;
It supports a simple 4-connectivity particle-spring system. And also &lt;a href=&#34;http://www.cs.cornell.edu/courses/cs667/2005sp/studentSlides/07budsberg.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Provot’s spring model&lt;/a&gt;, which can simulate stretch, shear, and bending.&lt;/li&gt;
&lt;/ul&gt;
&lt;video autoplay muted loop&gt;
  &lt;source src=&#34;https://SirKoto.github.io/projects_images/mass_spring/cloth.mp4&#34; type=&#34;video/mp4&#34;&gt;
  Your browser does not support the video tag.
&lt;/video&gt;</description>
    </item>
    
    <item>
      <title>Spectral Clustering</title>
      <link>https://SirKoto.github.io/project/spectral-cluster/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://SirKoto.github.io/project/spectral-cluster/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Multilevel clustering of vertices of a triangle mesh using Spectral partitioning.&lt;/p&gt;
&lt;p&gt;The first step is to apply vertex clustering using an octree, followed by spectral partitioning with the Fiedler Vector, until a certain depth is reached.&lt;/p&gt;
&lt;table&gt;&lt;tr&gt;
&lt;th&gt;Vertex Clustering&lt;/th&gt;&lt;th&gt;Vertex + Spectral Clustering&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;img src=&#34;https://SirKoto.github.io/projects_images/spectral/octree.PNG&#34; alt=&#34;Vertex Clustering&#34; style=&#34;width: 350px;&#34;/&gt; &lt;/td&gt;
&lt;td&gt; &lt;img src=&#34;featured.PNG&#34; alt=&#34;Vertex+Spectral Clustering&#34; style=&#34;width: 350px;&#34;/&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The Fiedler Vector expresses the algebraic connectivity of a graph. A partition of the vertices is given by the sign of the components of the Fiedler Vector. Given the Laplacian matrix $\mathcal{L}$ of a mesh, the Fiedler vector is the eigenvector with the second-smallest eigenvalue.&lt;/p&gt;
&lt;p&gt;The multilevel implementation is required because computing the Fiedler Vector of huge matrices is prohibitive, and vertex clustering is a good and fast approach to reduce the complexity.&lt;/p&gt;
&lt;p&gt;One must note that vertex clustering may produce disconnect clusters, which spectral clustering does not like as input. A Union-Find algorithm has been implemented to separate the connected clusters and classify them separately.&lt;/p&gt;
&lt;p&gt;The program also supports computing an optimized cache-oblivious mesh layout, following Yoon et al.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, which optimizes each of the clusters&#39; vertices and sorts the faces of the mesh. It is important to note that it has $O(n!)$ complexity, where $n$ is the size of the clusters.&lt;/p&gt;
&lt;p&gt;The implementation is written in C++, using &lt;a href=&#34;https://eigen.tuxfamily.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eigen&lt;/a&gt; and &lt;a href=&#34;https://spectralib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spectra&lt;/a&gt; for the sparse support and computation of eigenvectors.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Yoon, S. E., Lindstrom, P., Pascucci, V., &amp;amp; Manocha, D. (2005). &lt;em&gt;Cache-oblivious mesh layouts&lt;/em&gt;. In ACM SIGGRAPH 2005 Papers (pp. 886-893).&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>GPU Visibility algorithms comparison</title>
      <link>https://SirKoto.github.io/project/visibility-comparison/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://SirKoto.github.io/project/visibility-comparison/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Program, implemented in C++, which generates a scene with a set of Armadillos (346k triangles, 173k vertices per model) on a grid. Then the camera follows a route that tries to emulate many different camera angles.&lt;/p&gt;
&lt;p&gt;This is used to benchmark the framerate obtained with the following algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unoptimized implementation&lt;/li&gt;
&lt;li&gt;View-frustum culling&lt;/li&gt;
&lt;li&gt;GPU Occlusion queries culling&lt;/li&gt;
&lt;li&gt;CHC++: Frustum culling+occlusion queries (&lt;a href=&#34;https://dcgi.fel.cvut.cz/home/bittner/publications/chc&amp;#43;&amp;#43;.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;O. Mattausch &amp;amp; J. Bittner &amp;amp; M. Wimme&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;The following chart shows the resulting frame rates of running the same scene with the different algorithms (Lower is better).
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://SirKoto.github.io/projects_images/visib_cmp/results.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easy to see that the Occlusion Queries and CHC++ algorithms are superior to simple frustum culling. Nevertheless, it is important to note that the occlusion queries implementation uses the information of the previous frame, thus it can cause some poping.&lt;/p&gt;
&lt;p&gt;On the other hand, CHC++ works with current frame visibility, not causing visible artifacts, but because of its internal data structures sometimes brusque camera movements may cause noticeable frame-rate drops.&lt;/p&gt;
&lt;h2 id=&#34;more-information&#34;&gt;More information&amp;hellip;&lt;/h2&gt;
&lt;p&gt;For more information about the actual implementation and results see the &lt;a href=&#34;https://github.com/SirKoto/visibility_comparison/blob/main/Visibility_Report.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Visibility_Report.pdf&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;Developed for the Fast Realistic Rendering course of the Master in Innovation and Research in Informatics, at the Barcelona School of Informatics.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vulkan Game Engine</title>
      <link>https://SirKoto.github.io/project/g-renderer/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://SirKoto.github.io/project/g-renderer/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Simple Game Engine using Vulkan 1.2, implementing common Game Engine features and capabilities.&lt;/p&gt;
&lt;p&gt;The software also implements a custom job system using system fibers, following Naughty Dog&amp;rsquo;s talk on GDC2015 &amp;ldquo;&lt;a href=&#34;https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Parallelizing the Naughty Dog Engine Using Fibers&lt;/a&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This Engine implements common characteristics as interactable GameObject oriented scenes, scene/project serialization, model instancing, and multi-threaded command buffer recording.&lt;/p&gt;
&lt;p&gt;Some algorithms for geometry processing and time-critical rendering have also been implemented, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vertex-Clustering mesh simplification. Fast simplification using octrees, and configurable with normal clustering and different error metrics.&lt;/li&gt;
&lt;li&gt;Automatic LOD meshes creation, which also computes multiple LODs at the same time for a performant implementation.&lt;/li&gt;
&lt;li&gt;Critical-Rendering automatic LOD selection to achieve stable fps. The objective frame delta time is configurable.&lt;/li&gt;
&lt;li&gt;Cell-to-Cell visibility. The Engine includes an editor to generate cells and walls; it generates a data structure that allows to precompute the visibility of the scene objects and cull non-visible objects at run-time. This uses a conservative supercover Bresenham approach.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>L-Systems</title>
      <link>https://SirKoto.github.io/project/l-systems/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://SirKoto.github.io/project/l-systems/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Following the guidelines of Lindenmayer&amp;rsquo;s &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Algorithmic_Beauty_of_Plants&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Algorithmic Beauty of Plants&lt;/a&gt;&amp;rdquo;, this project implements an L-system parser to create different patterns found in nature.&lt;/p&gt;
&lt;p&gt;In particular, this project implemented with C++ and OpenGL, implements the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graphical modeling using L-systems&lt;/li&gt;
&lt;li&gt;Custom constants&lt;/li&gt;
&lt;li&gt;3D rotations&lt;/li&gt;
&lt;li&gt;Stochastic rules&lt;/li&gt;
&lt;li&gt;Interactive rendering&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;Some of the examples provided with the program are these:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://SirKoto.github.io/projects_images/l_sys/1.jpg&#34; alt=&#34;image1&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://SirKoto.github.io/projects_images/l_sys/2.jpg&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://SirKoto.github.io/projects_images/l_sys/3.jpg&#34; alt=&#34;image3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semantic distances between GloVe&#39;s word embedings</title>
      <link>https://SirKoto.github.io/project/semantic-distances/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://SirKoto.github.io/project/semantic-distances/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;GPU implementation to compute word similarities using the &lt;em&gt;word embedding&lt;/em&gt; model of &lt;a href=&#34;https://nlp.stanford.edu/projects/glove/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GloVe&lt;/a&gt;, which contains $2.2\cdot10^6$ words.&lt;/p&gt;
&lt;p&gt;Given a word, the program computes the cosine distance between all other words in the database, where the cosine distance is defined as follows:&lt;/p&gt;
&lt;p&gt;$$ cosDist(\vec A, \vec B) = \frac{\vec A \cdot \vec B}{|\vec A||\vec B|}$$&lt;/p&gt;
&lt;p&gt;Because we are using angles to compute the similarities, we can also compute pairs of words with similar relationships. An example is if we search for &lt;em&gt;king - queen&lt;/em&gt; we get (among others) &lt;em&gt;men - women&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As the program will compute this distance between all other words, a GPU sorting and filtering algorithm have been implemented. It can retrieve the &lt;strong&gt;N&lt;/strong&gt; words with the highest similarity.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;The final implementation, making use of warp synchronization and minimizing memory usage in the sorting, can compute the all similarities in under 10ms.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
